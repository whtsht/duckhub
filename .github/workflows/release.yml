name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name: duckhub-linux-x86_64.tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: duckhub-linux-x86_64-gnu.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: duckhub-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: duckhub-macos-aarch64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: duckhub-windows-x86_64.zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install musl-tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev
          # Create symlinks for musl cross-compilation
          sudo ln -sf /usr/bin/musl-gcc /usr/local/bin/x86_64-linux-musl-gcc
          sudo ln -sf /usr/bin/g++ /usr/local/bin/x86_64-linux-musl-g++

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.15.1

      - name: Install cargo-zigbuild
        run: pip install cargo-zigbuild

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: src/ui/pnpm-lock.yaml

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build binary
        run: cargo zigbuild --release --target ${{ matrix.target }}

      - name: Package Artifact (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          tar -czvf ../../../${{ matrix.asset_name }} duckhub

      - name: Package Artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path duckhub.exe -DestinationPath ../../../${{ matrix.asset_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: artifacts/*/*
